version: 1
groups:
  # Internal options, that are used/computed by CKAN in runtime
  - annotation: ~
    options:
      - key: __file__
        internal: true
      - key: here
        internal: true
      - key: ckan.admin_tabs
        internal: true
      - key: computed_template_paths
        ignored: true
      - key: clear_logo_upload
        ignored: true
      - key: logo_upload
        ignored: true
      - key: ckan.host
        ignored: true
      - key: testing
        ignored: true
        type: bool

  # Options that are available inside CircleCI containers:
  - annotation: ~
    options:
      - key: CKAN_POSTGRES_USER
        internal: true
      - key: CKAN_DATASTORE_POSTGRES_WRITE_USER
        internal: true
      - key: CKAN_DATASTORE_POSTGRES_READ_USER
        internal: true
      - key: CKAN_POSTGRES_DB
        internal: true
      - key: CKAN_DATASTORE_POSTGRES_DB
        internal: true
      - key: CKAN_DATASTORE_POSTGRES_WRITE_PWD
        internal: true
      - key: CKAN_POSTGRES_PWD
        internal: true
      - key: CKAN_DATASTORE_POSTGRES_READ_PWD
        internal: true

  # Flask configuration options
  - annotation: ~
    options:
      - key: APPLICATION_ROOT
        internal: true
      - key: BABEL_DEFAULT_LOCALE
        internal: true
      - key: BABEL_DEFAULT_TIMEZONE
        ignored: true
      - key: BABEL_DOMAIN
        ignored: true
      - key: BABEL_MULTIPLE_DOMAINS
        ignored: true
      - key: BABEL_TRANSLATION_DIRECTORIES
        ignored: true
      - key: CKAN_INI
        internal: true
      - key: DEBUG
        internal: true
      - key: ENV
        internal: true
      - key: EXPLAIN_TEMPLATE_LOADING
        internal: true
      - key: JSONIFY_MIMETYPE
        internal: true
      - key: JSONIFY_PRETTYPRINT_REGULAR
        internal: true
      - key: JSON_AS_ASCII
        internal: true
      - key: JSON_SORT_KEYS
        internal: true
      - key: MAX_CONTENT_LENGTH
        internal: true
      - key: MAX_COOKIE_SIZE
        internal: true
      - key: PERMANENT_SESSION_LIFETIME
        internal: true
      - key: PREFERRED_URL_SCHEME
        internal: true
      - key: PRESERVE_CONTEXT_ON_EXCEPTION
        internal: true
      - key: PROPAGATE_EXCEPTIONS
        internal: true
      - key: SECRET_KEY
        internal: true
      - key: SEND_FILE_MAX_AGE_DEFAULT
        internal: true
      - key: SERVER_NAME
        internal: true
      - key: SESSION_COOKIE_DOMAIN
        internal: true
      - key: SESSION_COOKIE_HTTPONLY
        internal: true
      - key: SESSION_COOKIE_NAME
        internal: true
      - key: SESSION_COOKIE_PATH
        internal: true
      - key: SESSION_COOKIE_SAMESITE
        internal: true
      - key: SESSION_COOKIE_SECURE
        internal: true
      - key: SESSION_REFRESH_EACH_REQUEST
        internal: true
      - key: TEMPLATES_AUTO_RELOAD
        internal: true
      - key: TESTING
        internal: true
      - key: TRAP_BAD_REQUEST_ERRORS
        internal: true
      - key: TRAP_HTTP_EXCEPTIONS
        internal: true
      - key: USE_X_SENDFILE
        internal: true
      - key: DEBUG_TB_HOSTS
        internal: true
      - key: DEBUG_TB_ENABLED
        internal: true
      - key: DEBUG_TB_INTERCEPT_REDIRECTS
        internal: true
      - key: DEBUG_TB_PANELS
        internal: true

  - annotation: General settings
    options:
      - key: use
        placeholder: egg:ckan
        validators: not_empty
        required: true
      - key: debug
        type: bool
        example: 'true'
        description: >-
          This enables the `Flask-DebugToolbar
          <https://flask-debugtoolbar.readthedocs.io/>`_ in the web interface, makes
          Webassets serve unminified JS and CSS files, and enables CKAN templates'
          debugging features.

          You will need to ensure the ``Flask-DebugToolbar`` python package is installed,
          by activating your ckan virtual environment and then running::

              pip install -r /usr/lib/ckan/default/src/ckan/dev-requirements.txt

          If you are running CKAN on Apache, you must change the WSGI
          configuration to run a single process of CKAN. Otherwise
          the execution will fail with: ``AssertionError: The EvalException
          middleware is not usable in a multi-process environment``. Eg. change::

            WSGIDaemonProcess ckan_default display-name=ckan_default processes=2 threads=15
            to
            WSGIDaemonProcess ckan_default display-name=ckan_default threads=15

          .. warning:: This option should be set to ``False`` for a public site.
             With debug mode enabled, a visitor to your site could execute malicious
             commands.

      - key: ckan.legacy_route_mappings
        example: '{"home": "home.index", "about": "home.about", "search": "dataset.search"}'
        description: >-
          This can be used when using an extension that is still using old (Pylons-based) route names to
          maintain compatibility.

            .. warning:: This configuration will be removed when the migration to Flask is completed. Please
              update the extension code to use the new Flask-based route names.

      - key: config.mode
        default: default
        example: strict
        description: >-
          Controls the parsing and validation of ``config`` object. In ``default`` mode there is no validation
          applied to the provided configuration values and they are not guaranteed to be present. This is the
          current default behaviour and was the only one available in CKAN<=2.9.

          Enabling `strict` mode does the following:


          * For all the :ref:`declared config options <declare-config-options>`, if they
            are not provided the config file, the ddefault value from the declaration will be
            used in the ``config`` object.

          * All the :ref:`declared config options <declare-config-options>` will be
            normalized using validators specified in the declaration.

          * None of CKAN CLI commands will be executed and the CKAN application itself will
            not start unless **all** config options are valid according to the validators defined
            in the declaration. For every invalid config option, an error will be printed to the
            output stream.

  - annotation: Development settings
    options:
      - key: ckan.devserver.host
        default: localhost
        example: '0.0.0.0'
        description: >-
          Host name to use when running the development server.
      - key: ckan.devserver.port
        type: int
        default: 5000
        example: 5005
        description: >-
          Port to use when running the development server.
      - key: ckan.devserver.threaded
        type: bool
        example: 'true'
        description: >-
          Controls whether the development server should handle each request in a separate
          thread.
      - key: ckan.devserver.multiprocess
        type: int
        default: 1
        example: 8
        description: >-
          If greater than 1 then the development server will handle each request in a new process, up to this
          maximum number of concurrent processes.
      - key: ckan.devserver.watch_patterns
        type: list
        example: 'mytheme/**/*.yaml mytheme/**/*.json'
        description: >-
          A list of files the reloader should watch to restart the development server, in addition to the
          Python modules (for example configuration files)

      - key: ckan.devserver.ssl_cert
        example: path/to/host.cert
        description: >-
          Path to a certificate file that will be used to enable SSL (ie to serve the
          local development server on https://localhost:5000). You can generate a
          self-signed certificate and key (see :ref:`ckan.devserver.ssl_key`) running
          the following commands::

              openssl genrsa 2048 > host.key
              chmod 400 host.key
              openssl req -new -x509 -nodes -sha256 -days 3650 -key host.key > host.cert

          After that you can run CKAN locally with SSL using this command::

              ckan -c /path/to/ckan.ini run --ssl-cert=/path/to/host.cert --ssl-key=/path/to/host.key

          Alternatively, setting this option to ``adhoc`` will automatically generate a new
          certificate file (on each server reload, which means that you'll get a browser warning
          about the certificate on each reload).

      - key: ckan.devserver.ssl_key
        description: >-
          Example::

            ckan.devserver.ssl_key = path/to/host.key

          Default value: |config:ckan.devserver.ssl_key|

          Path to a certificate file that will be used to enable SSL (ie to serve the
          local development server on https://localhost:5000). See :ref:`ckan.devserver.ssl_cert`
          for more details. This option also supports the ``adhoc`` value, with the same caveat.


  - annotation: Session settings
    options:
      - key: cache_dir
        placeholder: "/tmp/%(ckan.site_id)s"
      - key: beaker.session.key
        default: ckan
      - key: beaker.session.secret
        validators: not_empty
        required: true
        placeholder_callable: secrets:token_urlsafe
        callable_args:
          nbytes: 20
        description: >-
          This is the secret token that the beaker library uses to hash the
          cookie sent to the client. `ckan generate config` generates a unique
          value for this each time it generates a config file.

  - annotation: repoze.who settings
    options:
      - key: who.config_file
        validators: not_empty
        required: true
        placeholder: "%(here)s/who.ini"
        description: >-
          Example::

           who.timeout = 3600

          Default value: |config:who.timeout|

          This defines how long (in seconds) until a user is logged out after a period
          of inactivity. If the setting isn't defined, the session doesn't expire. Not
          active by default.

      - key: who.log_level
        default: warning
      - key: who.log_file
        placeholder: "%(cache_dir)s/who_log.ini"
      - key: who.reissue_time
        default: 0
        type: int
      - key: who.timeout
        validators: ignore_empty convert_int
        description: >-
          Session timeout (user logged out after period of inactivity, in
          seconds). Inactive by default, so the session doesn't expire.
      - key: who.httponly
        type: bool
        default: true
        description: >-
          Example::

           who.httponly = false

          Default value: |config:who.httponly|

          This determines whether the HttpOnly flag will be set on the repoze.who
          authorization cookie. The default in the absence of the setting is ``True``.
          For enhanced security it is recommended to use the HttpOnly flag and not set
          this to ``False``, unless you have a good reason for doing so.

      - key: who.secure
        type: bool
        description: >-
          Example::

           who.secure = True

          Default value: |config:who.secure|

          This determines whether the secure flag will be set for the repoze.who
          authorization cookie. If ``True``, the cookie will be sent over HTTPS. The
          default in the absence of the setting is ``False``.

      - key: who.samesite
        default: Lax
        description: >-
          Example::

           who.samesite = Strict

          Default value: |config:who.samesite|

          This determines whether the SameSite flag will be set for the repoze.who
          authorization cookie. Allowed values are ``Lax`` (the default one), ``Strict`` or ``None``.
          If set to ``None``,  ``who.secure`` must be set to ``True``.


  - annotation: Database settings
    options:
      - key: sqlalchemy.url
        placeholder: postgresql://ckan_default:pass@localhost/ckan_default
        validators: not_empty
        required: true
        description: >-
          Example::

           sqlalchemy.url = postgres://tester:pass@localhost/ckantest3

          This defines the database that CKAN is to use. The format is::

           sqlalchemy.url = postgres://USERNAME:PASSWORD@HOST/DBNAME

      - key: sqlalchemy.pool_pre_ping
        type: bool
        default: true
      - key: sqlalchemy.<OPTION>
        type: dynamic
        description: >-
          Example::

           sqlalchemy.pool_pre_ping=True
           sqlalchemy.pool_size=10
           sqlalchemy.max_overflow=20

          Custom sqlalchemy config parameters used to establish the main
          database connection.

          To get the list of all the available properties check the `SQLAlchemy documentation`_

          .. _SQLAlchemy documentation: http://docs.sqlalchemy.org/en/rel_0_9/core/engines.html#engine-creation-api


  - annotation: Site Settings
    options:
      - key: ckan.site_url
        validators: not_empty
        required: true
        placeholder: http://127.0.0.1:5000
        description: >-
          Example::

            ckan.site_url = http://scotdata.ckan.net

          Default value: |config:ckan.site_url|

          Set this to the URL of your CKAN site. Many CKAN features that need an absolute URL to your
          site use this setting.

          This setting should only contain the protocol (e.g. ``http://``), host (e.g.
          ``www.example.com``) and (optionally) the port (e.g. ``:8080``). In particular,
          if you have mounted CKAN at a path other than ``/`` then the mount point must
          *not* be included in ``ckan.site_url``. Instead, you need to set
          :ref:`ckan.root_path`.

          .. important:: It is mandatory to complete this setting

          .. warning::

            This setting should not have a trailing / on the end.

      - key: apikey_header_name
        default: X-CKAN-API-Key
        description: >-
          Example::

           apikey_header_name = API-KEY

          Default value: |config:apikey_header_name|

          This allows another http header to be used to provide the CKAN API key. This is useful if network infrastructure blocks the Authorization header and ``X-CKAN-API-Key`` is not suitable.

      - key: ckan.cache_expires
        default: 0
        type: int
        description: >-
          Example::

            ckan.cache_expires = 2592000

          Default value: |config:ckan.cache_expires|

          This sets ``Cache-Control`` header's max-age value.

      - key: ckan.cache_enabled
        type: bool
        description: >-
          Example::

            ckan.cache_enabled = True

          Default value: |config:ckan.cache_enabled|

          This enables cache control headers on all requests. If the user is not logged in and there is no session data a ``Cache-Control: public`` header will be added. For all other requests the ``Cache-control: private`` header will be added.

      - key: ckan.mimetype_guess
        default: file_ext
        description: >-
          Example::

            ckan.mimetype_guess = file_ext

          Default value: |config:ckan.mimetype_guess|

          There are three options for guessing the mimetype of uploaded or linked resources: file_ext, file_contents, None.

          ``file_ext`` will guess the mimetype by the url first, then the file extension.

          ``file_contents`` will guess the mimetype by the file itself, this tends to be inaccurate.

          ``None`` will not store the mimetype for the resource.

      - key: ckan.static_max_age
        default: 3600
        type: int
        description: >-
          Example::

            ckan.static_max_age = 2592000

          Default value: |config:ckan.static_max_age|

          Controls CKAN static files' cache max age, if we're serving and caching them.


      - key: ckan.tracking_enabled
        type: bool
        description: >-
          Example::

            ckan.tracking_enabled = True

          Default value: |config:ckan.tracking_enabled|

          This controls if CKAN will track the site usage. For more info, read :ref:`tracking`.

      - key: ckan.valid_url_schemes
        type: list
        default:
          - http
          - https
          - ftp
        description: >-
          Example::

            ckan.valid_url_schemes = http https ftp sftp

          Default value: |config:ckan.valid_url_schemes|

          Controls what uri schemes are rendered as links.


  - annotation: Authorization Settings
    options:
      - key: ckan.auth.anon_create_dataset
        type: bool
        description: >-
          Example::

           ckan.auth.anon_create_dataset = False

          Default value: |config:ckan.auth.anon_create_dataset|

          Allow users to create datasets without registering and logging in.

      - key: ckan.auth.create_unowned_dataset
        default: true
        type: bool
        description: >-
          Example::

           ckan.auth.create_unowned_dataset = False

          Default value: |config:ckan.auth.create_unowned_dataset|


          Allow the creation of datasets not owned by any organization.

      - key: ckan.auth.create_dataset_if_not_in_organization
        default: true
        type: bool
        description: >-
          Example::

           ckan.auth.create_dataset_if_not_in_organization = False

          Default value: |config:ckan.auth.create_dataset_if_not_in_organization|


          Allow users who are not members of any organization to create datasets,
          default: true. ``create_unowned_dataset`` must also be True, otherwise
          setting ``create_dataset_if_not_in_organization`` to True is meaningless.

      - key: ckan.auth.user_create_groups
        type: bool
        description: >-
          Example::

           ckan.auth.user_create_groups = True

          Default value: |config:ckan.auth.user_create_groups|


          Allow users to create groups.

      - key: ckan.auth.user_create_organizations
        default: true
        type: bool
        description: >-
          Example::

           ckan.auth.user_create_organizations = False

          Default value: |config:ckan.auth.user_create_organizations|


          Allow users to create organizations.

      - key: ckan.auth.user_delete_groups
        type: bool
        default: true
        description: >-

          Example::

           ckan.auth.user_delete_groups = False

          Default value: |config:ckan.auth.user_delete_groups|


          Allow users to delete groups.

      - key: ckan.auth.user_delete_organizations
        type: bool
        default: true
        description: >-
          Example::

           ckan.auth.user_delete_organizations = False

          Default value: |config:ckan.auth.user_delete_organizations|


          Allow users to delete organizations.

      - key: ckan.auth.create_user_via_api
        type: bool
        description: >-
          Example::

           ckan.auth.create_user_via_api = False

          Default value: |config:ckan.auth.create_user_via_api|


          Allow new user accounts to be created via the API by anyone. When ``False`` only sysadmins are authorised.

      - key: ckan.auth.create_user_via_web
        type: bool
        default: true
        description: >-
          Example::

           ckan.auth.create_user_via_web = True

          Default value: |config:ckan.auth.create_user_via_web|

          Allow new user accounts to be created via the Web.

      - key: ckan.auth.roles_that_cascade_to_sub_groups
        type: list
        default:
          - admin
        description: >-
          Example::

           ckan.auth.roles_that_cascade_to_sub_groups = admin editor

          Default value: |config:ckan.auth.roles_that_cascade_to_sub_groups|


          Makes role permissions apply to all the groups or organizations down the hierarchy from the groups or organizations that the role is applied to.

          e.g. a particular user has the 'admin' role for group 'Department of Health'. If you set the value of this option to 'admin' then the user will automatically have the same admin permissions for the child groups of 'Department of Health' such as 'Cancer Research' (and its children too and so on).

      - key: ckan.auth.public_user_details
        type: bool
        default: true
        description: >-
          Example::

            ckan.auth.public_user_details = False

          Default value: |config:ckan.auth.public_user_details|

          Restricts anonymous access to user information. If is set to ``False`` accessing users details when not logged in will raise a ``Not Authorized`` exception.

          .. note:: This setting should be used when user registration is disabled (``ckan.auth.create_user_via_web = False``), otherwise users
              can just create an account to see other users details.

      - key: ckan.auth.public_activity_stream_detail
        type: bool
        description: >-
          Example::

            ckan.auth.public_activity_stream_detail = True

          Default value: |config:ckan.auth.public_activity_stream_detail|

          Restricts access to 'view this version' and 'changes' in the Activity Stream pages. These links provide users with the full edit history of datasets etc - what they showed in the past and the diffs between versions. If this option is set to ``False`` then only admins (e.g. whoever can edit the dataset) can see this detail. If set to ``True``, anyone can see this detail (assuming they have permission to view the dataset etc).

      - key: ckan.auth.allow_dataset_collaborators
        type: bool
        description: >-
          Example::

            ckan.auth.allow_dataset_collaborators = True

          Default value: |config:ckan.auth.allow_dataset_collaborators|

          Enables or disable collaborators in individual datasets. If ``True``, in addition to the standard organization based permissions, users can be added as collaborators to individual datasets with different roles, regardless of the organization they belong to. For more information, check the documentation on :ref:`dataset_collaborators`.

          .. warning:: If this setting is turned off in a site where there already were collaborators created, you must reindex all datasets to update the permission labels, in order to prevent access to private datasets to the previous collaborators.

      - key: ckan.auth.allow_admin_collaborators
        type: bool
        description: >-
          Example::

            ckan.auth.allow_admin_collaborators = True

          Default value: |config:ckan.auth.allow_admin_collaborators|


          Allows dataset collaborators to have the "Admin" role, allowing them to add more collaborators or remove existing ones. By default, collaborators can only be managed by administrators of the organization the dataset belongs to. For more information, check the documentation on :ref:`dataset_collaborators`.


          .. warning:: If this setting is turned off in a site where admin collaborators have been already created, existing collaborators with role "admin" will no longer be able to add or remove collaborators, but they will still be able to edit and access the datasets that they are assigned to.

      - key: ckan.auth.allow_collaborators_to_change_owner_org
        type: bool
        description: >-
          Example::

            ckan.auth.allow_collaborators_to_change_owner_org = True

          Default value: |config:ckan.auth.allow_collaborators_to_change_owner_org|


          Allows dataset collaborators to change the owner organization of the datasets they are collaborators on. Defaults to False, meaning that collaborators with role admin or editor can edit the dataset metadata but not the organization field.

      - key: ckan.auth.create_default_api_keys
        type: bool
        description: >-
          Example::

            ckan.auth.create_default_api_keys = True

          Default value: |config:ckan.auth.create_default_api_keys|


          Determines if a an API key should be automatically created for every user when creating a user account. If set to False (the default value), users can manually create an API token from their profile instead. See :ref:`api authentication`: for more details.


  - annotation: API Token Settings
    options:
      - key: api_token.nbytes
        type: int
        default: 32
        description: >-
          Example::

            api_token.nbytes = 20

          Default value: |config:api_token.nbytes|

          Number of bytes used to generate unique id for API Token.

      - key: api_token.jwt.encode.secret
        description: >-
          Example::

            api_token.jwt.encode.secret = file:/path/to/private/key

          Default value: |config:api_token.jwt.encode.secret|

          A key suitable for the chosen algorithm(``api_token.jwt.algorithm``):

          * for asymmetric algorithms: path to private key with ``file:`` prefix. I.e ``file:/path/private/key``
          * for symmetric algorithms: plain string, sufficiently long for security with ``string:`` prefix. I.e ``string:123abc``

          Value must have prefix, which defines its type. Supported prefixes are:

          * ``string:`` - Plain string, will be used as is.
          * ``file:`` - Path to file. Content of the file will be used as key.

      - key: api_token.jwt.decode.secret
        description: >-
          Example::

            api_token.jwt.decode.secret = file:/path/to/public/key.pub

          Default value: |config:api_token.jwt.decode.secret|

          A key suitable for the chosen algorithm(``api_token.jwt.algorithm``):

          * for asymmetric algorithms: path to public key with ``file:`` prefix. I.e ``file:/path/public/key.pub``
          * for symmetric algorithms: plain string, sufficiently long for security with ``string:`` prefix. I.e ``string:123abc``

          Value must have prefix, which defines it's type. Supported prefixes are:

          * ``string:`` - Plain string, will be used as is.
          * ``file:`` - Path to file. Content of the file will be used as key.

      - key: api_token.jwt.algorithm
        default: "HS256"
        description: >-
          Example::

            api_token.jwt.algorithm = RS256

          Default value: |config:api_token.jwt.algorithm|

          Algorithm to sign the token with, e.g. "ES256", "RS256"


  - annotation: Search Settings
    options:
      - key: ckan.site_id
        default: default
        description: >-
          Example::

           ckan.site_id = my_ckan_instance

          Default value: |config:ckan.site_id|

          CKAN uses Solr to index and search packages. The search index is linked to the value of the ``ckan.site_id``, so if you have more than one
          CKAN instance using the same `solr_url`_, they will each have a separate search index as long as their ``ckan.site_id`` values are different. If you are only running
          a single CKAN instance then this can be ignored.

          Note, if you change this value, you need to rebuild the search index.

      - key: solr_url
        placeholder: http://127.0.0.1:8983/solr/ckan
        validators: not_empty
        required: true
        description: >-
          Example::

           solr_url = http://solr.okfn.org:8983/solr/ckan-schema-2.0

          Default value: |config:solr_url|

          This configures the Solr server used for search. The Solr schema found at that URL must be one of the ones in ``ckan/config/solr`` (generally the most recent one). A check of the schema version number occurs when CKAN starts.

          Optionally, ``solr_user`` and ``solr_password`` can also be configured to specify HTTP Basic authentication details for all Solr requests.

          .. note::  If you change this value, you need to rebuild the search index.

      - key: solr_user
      - key: solr_password
      - key: ckan.search.automatic_indexing
        type: bool
        default: true
        description: >-
          Example::

           ckan.search.automatic_indexing = true

          Default value: |config:ckan.search.automatic_indexing|

          Make all changes immediately available via the search after editing or
          creating a dataset. Default is true. If for some reason you need the indexing
          to occur asynchronously, set this option to false.

          .. note:: This is equivalent to explicitly load the ``synchronous_search`` plugin.

      - key: ckan.search.solr_commit
        type: bool
        default: true
        description: >-
          Example::

           ckan.search.solr_commit = false

          Default value: |config:ckan.search.solr_commit|

          Make ckan commit changes solr after every dataset update change. Turn this to false if on solr 4.0 and you have automatic (soft)commits enabled to improve dataset update/create speed (however there may be a slight delay before dataset gets seen in results).

      - key: ckan.cache_validated_datasets
        type: bool
        default: true
      - key: ckan.search.show_all_types
        default: dataset
        description: >-
          Example::

           ckan.search.show_all_types = dataset

          Default value: |config:ckan.search.show_all_types|

          Controls whether a search page (e.g. ``/dataset``) should also show
          custom dataset types. The default is ``false`` meaning that no search
          page for any type will show other types. ``true`` will show other types
          on the ``/dataset`` search page. Any other value (e.g. ``dataset`` or
          ``document`` will be treated as a dataset type and that type's search
          page will show datasets of all types.

      - key: ckan.search.default_include_private
        type: bool
        default: true
        description: >-
          Example::

           ckan.search.default_include_private = false

          Default value: |config:ckan.search.default_include_private|

          Controls whether the default search page (``/dataset``) should include
          private datasets visible to the current user or only public datasets
          visible to everyone.

      - key: ckan.search.default_package_sort
        default:  score desc, metadata_modified desc
        description: >-
          Example::

           ckan.search.default_package_sort = name asc

          Default value: |config:ckan.search.default_package_sort|

          Controls whether the default search page (``/dataset``) should different
          sorting parameter by default when the request does not specify sort.

      - key: search.facets
        type: list
        default:
          - organization
          - groups
          - tags
          - res_format
          - license_id
      - key: search.facets.limit
        type: int
        default: 50
        description: >-
          Example::

           search.facets.limit = 100

          Default value: |config:search.facets.limit|

          Sets the default number of searched facets returned in a query.

      - key: search.facets.default
        type: int
        default: 10
        description: >-
          Example::

            search.facets.default = 10

          Default value: |config:search.facets.default|

          Default number of facets shown in search results.

      - key: ckan.extra_resource_fields
        type: list
        description: >-
          Example::

            ckan.extra_resource_fields = alt_url

          Default value: |config:ckan.extra_resource_fields|

          List of the extra resource fields that would be used when searching.

      - key: ckan.search.rows_max
        type: int
        default: 1000
        description: >-
          Example::

            ckan.search.rows_max = 1000

          Default value: |config:ckan.search.rows_max|

          Maximum allowed value for rows returned. Specifically this limits:

          * ``package_search``'s ``rows`` parameter
          * ``group_show`` and ``organization_show``'s number of datasets returned when specifying ``include_datasets=true``

      - key: ckan.group_and_organization_list_max
        type: int
        default: 1000
        description: >-
          Example::

            ckan.group_and_organization_list_max = 1000

          Default value: |config:ckan.group_and_organization_list_max|

          Maximum number of groups/organizations returned when listing them. Specifically this limits:

          * ``group_list``'s ``limit`` when ``all_fields=false``
          * ``organization_list``'s ``limit`` when ``all_fields=false``

      - key: ckan.group_and_organization_list_all_fields_max
        type: int
        default: 25
        description: >-
          Example::

            ckan.group_and_organization_list_all_fields_max = 100

          Default value: |config:ckan.group_and_organization_list_all_fields_max|

          Maximum number of groups/organizations returned when listing them in detail. Specifically this limits:

          * ``group_list``'s ``limit`` when ``all_fields=true``
          * ``organization_list``'s ``limit`` when ``all_fields=true``

      - key: solr_timeout
        type: int
        default: 60
        description: >-
          Example::

           solr_timeout = 120

          Default value: |config:solr_timeout|

          The option defines the timeout in seconds until giving up on a request. Raising this value might help you if you encounter a timeout exception.


  - annotation: Redis Settings
    options:
      - key: ckan.redis.url
        default: redis://localhost:6379/0
        validators: not_empty
        description: >-
          Example::

              ckan.redis.url = redis://localhost:7000/1

          Default value: |config:ckan.redis.url|

          URL to your Redis instance, including the database to be used.

  - annotation: CORS Settings
    options:
      - key: ckan.cors.origin_allow_all
        type: bool
        description: >-
          Example::

            ckan.cors.origin_allow_all = True

          Default value: |config:ckan.cors.origin_allow_all|

          This setting must be present to enable CORS. If True, all origins will be allowed (the response header Access-Control-Allow-Origin is set to '*'). If False, only origins from the ``ckan.cors.origin_whitelist`` setting will be allowed.

      - key: ckan.cors.origin_whitelist
        type: list
        description: >-
          Example::

            ckan.cors.origin_whitelist = http://www.myremotedomain1.com http://myremotedomain1.com

          Default value: |config:ckan.cors.origin_whitelist|

          A space separated list of allowable origins. This setting is used when ``ckan.cors.origin_allow_all = False``.


  - annotation: Plugins Settings
    options:
      - key: ckan.plugins
        required: true
        type: list
        description: >-
          Example::

            ckan.plugins = disqus datapreview googleanalytics follower

          Default value: |config:ckan.plugins|

          Specify which CKAN plugins are to be enabled.

          .. warning::  If you specify a plugin but have not installed the code,  CKAN will not start.

          Format as a space-separated list of the plugin names. The plugin name is the key in the ``[ckan.plugins]`` section of the extension's ``setup.py``. For more information on plugins and extensions, see :doc:`/extensions/index`.

          .. note::

              The order of the plugin names in the configuration file influences the
              order that CKAN will load the plugins in. As long as each plugin class is
              implemented in a separate Python module (i.e. in a separate Python source
              code file), the plugins will be loaded in the order given in the
              configuration file.

              When multiple plugins are implemented in the same Python module, CKAN will
              process the plugins in the order that they're given in the config file, but as
              soon as it reaches one plugin from a given Python module, CKAN will load all
              plugins from that Python module, in the order that the plugin classes are
              defined in the module.

              For simplicity, we recommend implementing each plugin class in its own Python
              module.

              Plugin loading order can be important, for example for plugins that add custom
              template files: templates found in template directories added earlier will
              override templates in template directories added later.

              .. todo::

                  Fix CKAN's plugin loading order to simply load all plugins in the order
                  they're given in the config file, regardless of which Python modules
                  they're implemented in.


  - annotation: Front-End Settings
    options:
      - key: ckan.site_title
        default: CKAN
        description: >-
          Example::

           ckan.site_title = Open Data Scotland

          Default value: |config:ckan.site_title|

          This sets the name of the site, as displayed in the CKAN web interface.

      - key: ckan.site_description
        description: >-
          Example::

           ckan.site_description = The easy way to get, use and share data

          Default value: |config:ckan.site_description|

          This is for a description, or tag line for the site, as displayed in the header of the CKAN web interface.

      - key: ckan.site_intro_text
        description: >-
          Example::

           ckan.site_intro_text = Nice introductory paragraph about CKAN or the site in general.

          Default value: |config:ckan.site_intro_text|

          This is for an introductory text used in the default template's index page.

      - key: ckan.site_logo
        default: /base/images/ckan-logo.png
        description: >-
          Example::

           ckan.site_logo = /images/ckan_logo_fullname_long.png

          Default value: |config:ckan.site_logo|

          This sets the logo used in the title bar.

      - key: ckan.site_about
        description: >-
          Example::

           ckan.site_about = A _community-driven_ catalogue of _open data_ for the Greenfield area.

          Default value::

            <p>CKAN is the world’s leading open-source data portal platform.</p>

            <p>CKAN is a complete out-of-the-box software solution that makes data
            accessible and usable – by providing tools to streamline publishing, sharing,
            finding and using data (including storage of data and provision of robust data
            APIs). CKAN is aimed at data publishers (national and regional governments,
            companies and organizations) wanting to make their data open and available.</p>

            <p>CKAN is used by governments and user groups worldwide and powers a variety
            of official and community data portals including portals for local, national
            and international government, such as the UK’s <a href="http://data.gov.uk">data.gov.uk</a>
            and the European Union’s <a href="http://publicdata.eu/">publicdata.eu</a>,
            the Brazilian <a href="http://dados.gov.br/">dados.gov.br</a>, Dutch and
            Netherland government portals, as well as city and municipal sites in the US,
            UK, Argentina, Finland and elsewhere.</p>

            <p>CKAN: <a href="http://ckan.org/">http://ckan.org/</a><br />
            CKAN Tour: <a href="http://ckan.org/tour/">http://ckan.org/tour/</a><br />
            Features overview: <a href="http://ckan.org/features/">http://ckan.org/features/</a></p>

          Format tips:

          * multiline strings can be used by indenting following lines

          * the format is Markdown

          .. note:: Whilst the default text is translated into many languages (switchable in the page footer), the text in this configuration option will not be translatable.
                    For this reason, it's better to overload the snippet in ``home/snippets/about_text.html``. For more information, see :doc:`/theming/index`.

      - key: ckan.main_css
        default: /base/css/main.css
        description: >-
          Example::

            ckan.main_css = /base/css/my-custom.css

          Default value: |config:ckan.main_css|

          With this option, instead of using the default `main.css`, you can use your own.

      - key: ckan.favicon
        default: /base/images/ckan.ico
        description: >-
          Example::

           ckan.favicon = http://okfn.org/wp-content/themes/okfn-master-wordpress-theme/images/favicon.ico

          Default value: |config:ckan.favicon|

          This sets the site's `favicon`. This icon is usually displayed by the browser in the tab heading and bookmark.

      - key: ckan.legacy_templates
        ignored: true
        type: bool
      - key: ckan.datasets_per_page
        type: int
        default: 20
        description: >-
          Example::

           ckan.datasets_per_page = 10

          Default value: |config:ckan.datasets_per_page|

          This controls the pagination of the dataset search results page. This is the maximum number of datasets viewed per page of results.

      - key: package_hide_extras
        type: list
        description: >-
          Example::

           package_hide_extras = my_private_field other_field

          Default value: |config:package_hide_extras|

          This sets a space-separated list of extra field key values which will not be shown on the dataset read page.

          .. warning::  While this is useful to e.g. create internal notes, it is not a security measure. The keys will still be available via the API and in revision diffs.

      - key: ckan.dumps_url
        description: >-
          If there is a page which allows you to download a dump of the entire catalogue
          then specify the URL here, so that it can be advertised in the
          web interface. For example::

            ckan.dumps_url = http://ckan.net/dump/

          For more information on using dumpfiles, see :ref:`datasets dump`.

      - key: ckan.dumps_format
        description: >-
          If there is a page which allows you to download a dump of the entire catalogue
          then specify the format here, so that it can be advertised in the
          web interface. ``dumps_format`` is just a string for display. Example::

            ckan.dumps_format = CSV/JSON

      - key: ckan.recaptcha.publickey
        description: >-
          The public key for your reCAPTCHA account, for example::

           ckan.recaptcha.publickey = 6Lc...-KLc

          To get a reCAPTCHA account, sign up at: http://www.google.com/recaptcha

      - key: ckan.recaptcha.privatekey
        description: >-
          The private key for your reCAPTCHA account, for example::

           ckan.recaptcha.privatekey = 6Lc...-jP

          Setting both :ref:`ckan.recaptcha.publickey` and
          :ref:`ckan.recaptcha.privatekey` adds captcha to the user registration form.
          This has been effective at preventing bots registering users and creating spam
          packages.

      - key: ckan.featured_groups
        type: list
        description: >-
          Example::

           ckan.featured_groups = group_one

          Default Value: |config:ckan.featured_groups|

          Defines a list of group names or group ids. This setting is used to display a
          group and datasets on the home page in the default templates (1 group and 2
          datasets are displayed).

      - key: ckan.featured_orgs
        type: list
        description: >-
          Example::

           ckan.featured_orgs = org_one

          Default Value: |config:ckan.featured_orgs|

          Defines a list of organization names or ids. This setting is used to display
          an organization and datasets on the home page in the default templates (1
          group and 2 datasets are displayed).

      - key: ckan.default_group_sort
        default: title
        description: >-
          Example::

           ckan.default_group_sort = name

          Default Value: |config:ckan.default_group_sort|

          Defines if some other sorting is used in group_list and organization_list
          by default when the request does not specify sort.

      - key: ckan.gravatar_default
        default: identicon
        description: >-
          Example::

            ckan.gravatar_default = disabled

          Default value: |config:ckan.gravatar_default|

          This controls the default gravatar style. Gravatar is used by default when a user has not set a custom profile picture,
          but it can be turn completely off by setting this option to "disabled". In that case, a placeholder image will be shown
          instead, which can be customized overriding the ``templates/user/snippets/placeholder.html`` template.

      - key: ckan.debug_supress_header
        type: bool
        description: >-
          Example::

            ckan.debug_supress_header = False

          Default value: |config:ckan.debug_supress_header|

          This configs if the debug information showing the controller and action
          receiving the request being is shown in the header.

          .. note:: This info only shows if debug is set to True.


      - key: ckan.homepage_style
        default: "1"
      - key: ckan.site_custom_css


  - annotation: Resource Views Settings
    options:
      - key: ckan.views.default_views
        type: list
        default:
          - image_view
          - recline_view
        description: >-
          Example::

           ckan.views.default_views = image_view webpage_view recline_grid_view

          Default value: |config:ckan.views.default_views|

          Defines the resource views that should be created by default when creating or
          updating a dataset. From this list only the views that are relevant to a particular
          resource format will be created. This is determined by each individual view.

          If not present (or commented), the default value is used. If left empty, no
          default views are created.

          .. note:: You must have the relevant view plugins loaded on the ``ckan.plugins``
              setting to be able to create the default views, eg::

                  ckan.plugins = image_view webpage_view recline_grid_view datatables_view ...

                  ckan.views.default_views = image_view webpage_view recline_grid_view

  - annotation: Theming Settings
    options:
      - key: ckan.template_head_end
        description: >-
          HTML content to be inserted just before ``</head>`` tag (e.g. extra stylesheet)

          Example::

            ckan.template_head_end = <link rel="stylesheet" href="http://mysite.org/css/custom.css" type="text/css">

          You can also have multiline strings. Just indent following lines. e.g.::

           ckan.template_head_end =
            <link rel="stylesheet" href="/css/extra1.css" type="text/css">
            <link rel="stylesheet" href="/css/extra2.css" type="text/css">

          .. note:: This is only for legacy code, and shouldn't be used anymore.

      - key: ckan.template_footer_end
        description: >-
          HTML content to be inserted just before ``</body>`` tag (e.g. Google Analytics code).

          .. note:: you can have multiline strings (just indent following lines)

          Example (showing insertion of Google Analytics code)::

            ckan.template_footer_end = <!-- Google Analytics -->
              <script src='http://www.google-analytics.com/ga.js' type='text/javascript'></script>
              <script type="text/javascript">
              try {
              var pageTracker = _gat._getTracker("XXXXXXXXX");
              pageTracker._setDomainName(".ckan.net");
              pageTracker._trackPageview();
              } catch(err) {}
              </script>
              <!-- /Google Analytics -->

          .. note:: This is only for legacy code, and shouldn't be used anymore.

      - key: ckan.template_title_delimiter
        default: '-'
        description: >-
          Example::

           ckan.template_title_delimiter = |

          Default value: |config:ckan.template_title_delimiter|

          This sets the delimiter between the site's subtitle (if there's one) and its title, in HTML's ``<title>``.

      - key: extra_template_paths
        default: ""
        description: >-
          Example::

           extra_template_paths = /home/okfn/brazil_ckan_config/templates

          Default value: |config:extra_template_paths|

          Use this option to specify where CKAN should look for additional templates, before reverting to the ``ckan/templates`` folder. You can supply more than one folder, separating the paths with a comma (,).

          For more information on theming, see :doc:`/theming/index`.

      - key: extra_public_paths
        default: ""
        description: >-
          Example::

           extra_public_paths = /home/okfn/brazil_ckan_config/public

          Default value: |config:extra_public_paths|

          To customise the display of CKAN you can supply replacements for static files such as HTML, CSS, script and PNG files. Use this option to specify where CKAN should look for additional files, before reverting to the ``ckan/public`` folder. You can supply more than one folder, separating the paths with a comma (,).

          For more information on theming, see :doc:`/theming/index`.

      - key: ckan.base_public_folder
        default: public
        description: >-
          Example::

           ckan.base_public_folder = public

          Default value: |config:ckan.base_public_folder|

          This config option is used to configure the base folder for static files used
          by CKAN core. It is currently unused and it only accepts one value: ``public``
          (Bootstrap 3, the default value from CKAN 2.8 onwards).

      - key: ckan.base_templates_folder
        default: templates
        description: >-
          Example::

           ckan.base_templates_folder = templates

          Default value: |config:ckan.base_templates_folder|

          This config option is used to configure the base folder for templates used
          by CKAN core. It is currently unused and it only accepts one vaue: ``templates``
          (Bootstrap 3, the default value from CKAN 2.8 onwards).

      - key: ckan.default.group_type
        default: group
      - key: ckan.default.organization_type
        default: organization


  - annotation: Storage Settings
    options:
      - key: ckan.storage_path
        placeholder: /var/lib/storage
        description: >-
          Example::

              ckan.storage_path = /var/lib/ckan

          Default value: |config:ckan.storage_path|

          This defines the location of where CKAN will store all uploaded data.

      - key: ckan.max_resource_size
        type: int
        default: 10
        description: >-
          Example::

              ckan.max_resource_size = 100

          Default value: |config:ckan.max_resource_size|

          The maximum in megabytes a resources upload can be.

      - key: ckan.max_image_size
        type: int
        default: 2
        description: >-
          Example::

              ckan.max_image_size = 10

          Default value: |config:ckan.max_image_size|

          The maximum in megabytes an image upload can be.


  - annotation: Uploader Settings
    options:
      - key: ckan.upload.user.types
        type: list
        description: >-
          Example::

              ckan.upload.user.types = image text

          Default value: |config:ckan.upload.user.types|

          File types allowed to upload as user's avatar. No restrictions applied when empty

      - key: ckan.upload.user.mimetypes
        type: list
        description: >-
          Example::

              ckan.upload.user.mimetypes = image/png text/svg

          Default value: |config:ckan.upload.user.mimetypes|

          File MIMETypes allowed to upload as user's avatar. No restrictions applied when empty

      - key: ckan.upload.group.types
        type: list
        description: >-
          Example::

              ckan.upload.group.types = image text

          Default value: |config:ckan.upload.group.types|

          File types allowed to upload as group image. No restrictions applied when empty

      - key: ckan.upload.group.mimetypes
        type: list
        description: >-
          Example::

              ckan.upload.group.mimetypes = image/png text/svg

          Default value: |config:ckan.upload.group.mimetypes|

          File MIMETypes allowed to upload as group image. No restrictions applied when empty



  - annotation: Webassets Settings
    options:
      - key: ckan.webassets.path
        description: >-
          Example::

            ckan.webassets.path = /var/lib/ckan/webassets

          Default value: ``webassets`` folder under the path specified by the
          :ref:`ckan.storage_path` option.

          In order to increase performance, static assets (CSS and JS files) included via an ``asset`` tag inside templates are compiled only once,
          when the asset is used for the first time. All subsequent requests to the
          asset will use the existing file. CKAN stores the compiled webassets in the file system, in the path specified by this config option.

      - key: ckan.webassets.use_x_sendfile
        type: bool
        description: >-
          Example::

            ckan.webassets.use_x_sendfile = true

          Default value: |config:ckan.webassets.use_x_sendfile|

          When serving static files, if this setting is ``True``, the applicatin will set the ``X-Sendfile`` header instead of
          serving the files directly with Flask. This will increase performance when serving the assets, but it
          requires that the web server (eg Nginx) supports the ``X-Sendfile`` header. See :ref:`x-sendfile` for more information.


  - annotation: User Settings
    options:
      - key: ckan.user_list_limit
        type: int
        default: 20
        description: >-
          Example::

            ckan.user_list_limit = 50

          Default value: |config:ckan.user_list_limit|

          This controls the number of users to show in the Users list. By default, it shows 20 users.

      - key: ckan.user_reset_landing_page
        default: home.index
        description: >-
          Example::

            ckan.user_reset_landing_page = dataset

          Default value: ``home.index``

          This controls the page where users will be sent after requesting a password reset.
          This is ordinarily the home page, but specific sites may prefer somewhere else.

      - key: ckan.route_after_login
        default: dashboard.index

  - annotation: Activity Streams Settings
    options:
      - key: ckan.activity_streams_enabled
        type: bool
        default: true
        description: >-
          Example::

           ckan.activity_streams_enabled = False

          Default value: |config:ckan.activity_streams_enabled|

          Turns on and off the activity streams used to track changes on datasets, groups, users, etc

      - key: ckan.activity_streams_email_notifications
        type: bool
        default: false
        description: >-
          Example::

           ckan.activity_streams_email_notifications = False

          Default value: |config:ckan.activity_streams_email_notifications|

          Turns on and off the activity streams' email notifications. You'd also need to setup a cron job to send
          the emails. For more information, visit :ref:`email-notifications`.

      - key: ckan.activity_list_limit
        type: int
        default: 31
        description: >-
          Example::

            ckan.activity_list_limit = 31

          Default value: |config:ckan.activity_list_limit|

          This controls the number of activities to show in the Activity Stream.

      - key: ckan.activity_list_limit_max
        type: int
        default: 100
        description: >-
          Example::

            ckan.activity_list_limit_max = 100

          Default value: |config:ckan.activity_list_limit_max|

          Maximum allowed value for Activity Stream ``limit`` parameter.

      - key: ckan.email_notifications_since
        default: '2 days'
        description: >-
          Example::

            ckan.email_notifications_since = 2 days

          Default value: |config:ckan.email_notifications_since|

          Email notifications for events older than this time delta will not be sent.
          Accepted formats: '2 days', '14 days', '4:35:00' (hours, minutes, seconds), '7 days, 3:23:34', etc.

      - key: ckan.hide_activity_from_users
        type: list
        placeholder: "%(ckan.site_id)s"
        description: >-
          Example::

              ckan.hide_activity_from_users = sysadmin

          Hides activity from the specified users from activity stream. If unspecified,
          it'll use :ref:`ckan.site_id` to hide activity by the site user. The site user
          is a sysadmin user on every ckan user with a username that's equal to
          :ref:`ckan.site_id`. This user is used by ckan for performing actions from the
          command-line.


  - annotation: Feeds Settings
    options:
      - key: ckan.feeds.author_name
        default: ""
        description: >-
          Example::

            ckan.feeds.author_name = Michael Jackson

          Default value: |config:ckan.feeds.author_name|

          This controls the feed author's name. If unspecified, it'll use :ref:`ckan.site_id`.

      - key: ckan.feeds.author_link
        description: >-
          Example::

            ckan.feeds.author_link = http://okfn.org

          Default value: |config:ckan.feeds.author_link|

          This controls the feed author's link. If unspecified, it'll use :ref:`ckan.site_url`.

      - key: ckan.feeds.authority_name
        default: ""
        description: >-
          Example::

            ckan.feeds.authority_name = http://okfn.org

          Default value: |config:ckan.feeds.authority_name|

          The domain name or email address of the default publisher of the feeds and elements. If unspecified, it'll use :ref:`ckan.site_url`.

      - key: ckan.feeds.date
        default: ""
        description: >-
          Example::

            ckan.feeds.date = 2012-03-22

          Default value: |config:ckan.feeds.date|

          A string representing the default date on which the authority_name is owned by the publisher of the feed.

      - key: ckan.feeds.limit
        type: int
        default: 20

  - annotation: Internationalisation Settings
    options:
      - key: ckan.locale_default
        default: en
        description: >-
          Example::

           ckan.locale_default = de

          Default value: |config:ckan.locale_default|

          Use this to specify the locale (language of the text) displayed in the CKAN Web UI. This requires a suitable `mo` file installed for the locale in the ckan/i18n. For more information on internationalization, see :doc:`/contributing/i18n`. If you don't specify a default locale, then it will default to the first locale offered, which is by default English (alter that with `ckan.locales_offered` and `ckan.locales_filtered_out`.

          .. note: In versions of CKAN before 1.5, the settings used for this was variously `lang` or `ckan.locale`, which have now been deprecated in favour of `ckan.locale_default`.

      - key: ckan.locales_offered
        type: list
        description: >-
          Example::

           ckan.locales_offered = en de fr

          Default value: |config:ckan.locales_offered|

          By default, all locales found in the ``ckan/i18n`` directory will be offered to the user. To only offer a subset of these, list them under this option. The ordering of the locales is preserved when offered to the user.

      - key: ckan.locales_filtered_out
        type: list
        description: >-
          Example::

           ckan.locales_filtered_out = pl ru

          Default value: |config:ckan.locales_filtered_out|

          If you want to not offer particular locales to the user, then list them here to have them removed from the options.

      - key: ckan.locale_order
        type: list
        description: >-
          Example::

           ckan.locale_order = fr de

          Default value: |config:ckan.locale_order|

          If you want to specify the ordering of all or some of the locales as they are offered to the user, then specify them here in the required order. Any locales that are available but not specified in this option, will still be offered at the end of the list.

      - key: ckan.i18n_directory
        description: >-
          Example::

            ckan.i18n_directory = /opt/locales/i18n/

          Default value: |config:ckan.i18n_directory|

          By default, the locales are searched for in the ``ckan/i18n`` directory. Use this option if you want to use another folder.

      - key: ckan.i18n.extra_directory
        description: >-
          Example::

            ckan.i18n.extra_directory = /opt/ckan/extra_translations/

          Default value: |config:ckan.i18n.extra_directory|

          If you wish to add extra translation strings and have them merged with the
          default ckan translations at runtime you can specify the location of the extra
          translations using this option.

      - key: ckan.i18n.extra_gettext_domain
        description: >-
          Example::

            ckan.i18n.extra_gettext_domain = mydomain

          Default value: |config:ckan.i18n.extra_gettext_domain|

          You can specify the name of the gettext domain of the extra translations. For
          example if your translations are stored as
          ``i18n/<locale>/LC_MESSAGES/somedomain.mo`` you would want to set this option
          to ``somedomain``

      - key: ckan.i18n.extra_locales
        type: list
        description: >-
          Example::

            ckan.i18n.extra_locales = fr es de

          Default value: |config:ckan.i18n.extra_locales|

          If you have set an extra i18n directory using ``ckan.i18n.extra_directory``, you
          should specify the locales that have been translated in that directory in this
          option.

      - key: ckan.i18n.rtl_languages
        type: list
        default:
          - he
          - ar
          - fa_IR
        description: >-
          Example::

            ckan.i18n.rtl_languages = he ar fa_IR

          Default value: |config:ckan.i18n.rtl_languages|

          Allows to modify the right-to-left languages

      - key: ckan.i18n.rtl_css
        default: /base/css/main-rtl.css
        description: >-
          Example::

            ckan.i18n.rtl_css = /base/css/my-custom-rtl.css

          Default value: |config:ckan.i18n.rtl_css|

          Allows to override the default rtl css file used for the languages defined
          in ``ckan.i18n.rtl_languages``.

      - key: ckan.display_timezone
        default: UTC
        description: >-
          Example::

            ckan.display_timezone = Europe/Zurich

          Default value: |config:ckan.display_timezone|

          By default, all datetimes are considered to be in the UTC timezone. Use this option to change the displayed dates on the frontend. Internally, the dates are always saved as UTC. This option only changes the way the dates are displayed.

          The valid values for this options [can be found at pytz](http://pytz.sourceforge.net/#helpers) (``pytz.all_timezones``). You can specify the special value `server` to use the timezone settings of the server, that is running CKAN.

      - key: ckan.root_path
        description: >-
          Example::

            ckan.root_path = /my/custom/path/{{LANG}}/foo

          Default value: |config:ckan.root_path|

          This setting is used to construct URLs inside CKAN. It specifies two things:

          * *At which path CKAN is mounted:* By default it is assumed that CKAN is mounted
            at ``/``, i.e. at the root of your web server. If you have configured your
            web server to serve CKAN from a different mount point then you need to
            duplicate that setting here.

          * *Where the locale is added to an URL:* By default, URLs are formatted as
            ``/some/url`` when using the default locale, or ``/de/some/url`` when using
            the ``de`` locale, for example. When ``ckan.root_path`` is set it must
            include the string ``{{LANG}}``, which will be replaced by the locale.

          .. important::

              The setting must contain ``{{LANG}}`` exactly as written here. Do not add
              spaces between the brackets.

          .. seealso::

              The host of your CKAN installation can be set via :ref:`ckan.site_url`.

          The CKAN repoze config file ``who.ini`` file will also need to be edited
          by adding the path prefix to the options in the ``[plugin:friendlyform]``
          section: ``login_form_url``, ``post_login_url`` and ``post_logout_url``.
          Do not change the login/logout_handler_path options.

      - key: ckan.resource_formats
        description: >-
          Example::

              ckan.resource_formats = /path/to/resource_formats

          Default value: |config:ckan.resource_formats|

          The purpose of this file is to supply a thorough list of resource formats
          and to make sure the formats are normalized when saved to the database
          and presented.

          The format of the file is a JSON object with following format::

              ["Format", "Description", "Mimetype", ["List of alternative representations"]]

          Please look in ckan/config/resource_formats.json for full details and and as an
          example.


  - annotation: Form Settings
    options:
      - key: ckan.dataset.create_on_ui_requires_resources
        type: bool
        default: true
        description: >-
          Example::

              ckan.dataset.create_on_ui_requires_resources = False

          Default value: |config:ckan.dataset.create_on_ui_requires_resources|

          If False, there is no need to add any resources when creating a new dataset.

      - key: package_new_return_url
        description: >-
          The URL to redirect the user to after they've submitted a new package form,
          example::

           package_new_return_url = http://datadotgc.ca/new_dataset_complete?name=<NAME>

          This is useful for integrating CKAN's new dataset form into a third-party
          interface, see :ref:`form-integration`.

          The ``<NAME>`` string is replaced with the name of the dataset created.

      - key: package_edit_return_url
        description: >-
          The URL to redirect the user to after they've submitted an edit package form,
          example::

           package_edit_return_url = http://datadotgc.ca/dataset/<NAME>

          This is useful for integrating CKAN's edit dataset form into a third-party
          interface, see :ref:`form-integration`.

          The ``<NAME>`` string is replaced with the name of the dataset that was edited.

      - key: licenses_group_url
        description: >-
          A url pointing to a JSON file containing a list of license objects. This list
          determines the licenses offered by the system to users, for example when
          creating or editing a dataset.

          This is entirely optional - by default, the system will use an internal cached
          version of the CKAN list of licenses available from the
          http://licenses.opendefinition.org/licenses/groups/ckan.json.

          More details about the license objects - including the license format and some
          example license lists - can be found at the `Open Licenses Service
          <http://licenses.opendefinition.org/>`_.

          Examples::

           licenses_group_url = file:///path/to/my/local/json-list-of-licenses.json
           licenses_group_url = http://licenses.opendefinition.org/licenses/groups/od.json


  - annotation: Email settings
    options:
      - key: smtp.server
        default: localhost
        description: >-
          Example::

            smtp.server = smtp.example.com:587

          Default value: |config:smtp.server|

          The SMTP server to connect to when sending emails with optional port.

      - key: smtp.starttls
        type: bool
        description: >-
          Example::

            smtp.starttls = True

          Default value: |config:smtp.starttls|

          Whether or not to use STARTTLS when connecting to the SMTP server.

      - key: smtp.user
        description: >-
          Example::

            smtp.user = username@example.com

          Default value: |config:smtp.user|

          The username used to authenticate with the SMTP server.

      - key: smtp.password
        description: >-
          Example::

            smtp.password = yourpass

          Default value: |config:smtp.password|

          The password used to authenticate with the SMTP server.

      - key: smtp.mail_from
        description: >-
          Example::

            smtp.mail_from = ckan@example.com

          Default value: |config:smtp.mail_from|

          The email address that emails sent by CKAN will come from. Note that, if left blank, the
          SMTP server may insert its own.

      - key: smtp.reply_to
        description: >-
          Example::

            smtp.mail_from = noreply.example.com

          Default value: |config:smtp.mail_from|

          The email address that will be used if someone attempts to reply to a system email.
          If left blank, no ``Reply-to`` will be added to the email and the value of
          ``smtp.mail_from`` will be used.

      - key: email_to
        description: >-
          Example::

            email_to = errors@example.com

          Default value: |config:email_to|

          This controls where the error messages will be sent to.

      - key: error_email_from
        description: >-
          Example::

            error_email_from = ckan-errors@example.com

          Default value: |config:error_email_from|

          This controls from which email the error messages will come from.


  - annotation: Background Job Settings
    options:
      - key: ckan.jobs.timeout
        type: int
        default: 180
